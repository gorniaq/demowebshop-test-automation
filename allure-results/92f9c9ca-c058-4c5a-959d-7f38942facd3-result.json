{"name": "test_registration[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x009B8923+23283]\n\t(No symbol) [0x0097E934]\n\t(No symbol) [0x008B0733]\n\t(No symbol) [0x008F326F]\n\t(No symbol) [0x008F34AB]\n\t(No symbol) [0x0092EE42]\n\t(No symbol) [0x00914464]\n\t(No symbol) [0x0092CB8D]\n\t(No symbol) [0x009141B6]\n\t(No symbol) [0x008E8017]\n\t(No symbol) [0x008E890D]\n\tGetHandleVerifier [0x00AAA5F3+1013699]\n\tGetHandleVerifier [0x00AB3E4C+1052700]\n\tGetHandleVerifier [0x00AAD4B4+1025668]\n\tGetHandleVerifier [0x009DEA2B+179195]\n\t(No symbol) [0x00986833]\n\t(No symbol) [0x00983198]\n\t(No symbol) [0x00983337]\n\t(No symbol) [0x0097B4BE]\n\tBaseThreadInitThunk [0x762D7BA9+25]\n\tRtlInitializeExceptionChain [0x772BC10B+107]\n\tRtlClearBits [0x772BC08F+191]", "trace": "browser_name = 'chrome'\n\n    @allure.feature('Registration')\n    @allure.story('User can register with valid details')\n    @pytest.mark.parametrize(\"browser_name\", [\"chrome\", \"firefox\"])\n    def test_registration(browser_name):\n        driver = DriverFactory.get_driver(browser_name)\n        driver.get(REGISTER_URL)\n    \n        try:\n            with allure.step('Filling out the registration form'):\n                logger.info('Filling out the registration form')\n                gender_radio = WebDriverWait(driver, 20).until(EC.presence_of_element_located(LoginPageLocators.GENDER_MALE if REGISTRATION_DATA['gender'] == 'male' else LoginPageLocators.GENDER_FEMALE))\n                gender_radio.click()\n    \n                fields = {\n                    LoginPageLocators.FIRST_NAME: REGISTRATION_DATA['first_name'],\n                    LoginPageLocators.LAST_NAME: REGISTRATION_DATA['last_name'],\n                    LoginPageLocators.EMAIL: REGISTRATION_DATA['email'],\n                    LoginPageLocators.PASSWORD: REGISTRATION_DATA['password'],\n                    LoginPageLocators.CONFIRM_PASSWORD: REGISTRATION_DATA['confirm_password'],\n                }\n    \n                for locator, value in fields.items():\n                    WebDriverWait(driver, 20).until(\n                        EC.presence_of_element_located(locator)\n                    ).send_keys(value)\n    \n            with allure.step('Submitting the registration form'):\n                logger.info('Submitting the registration form')\n                register_button = WebDriverWait(driver, 20).until(\n                    EC.presence_of_element_located(LoginPageLocators.REGISTER_BUTTON)\n                )\n                register_button.click()\n    \n            with allure.step('Verifying successful registration'):\n                logger.info('Verifying successful registration')\n>               result_page = WebDriverWait(driver, 20).until(\n                    EC.presence_of_element_located(LoginPageLocators.RESULT_PAGE)\n                )\n\ntests\\test_registration.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ab649f0b53f42c96b581b774f5775629\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000002590732B4C0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x009B8923+23283]\nE       \t(No symbol) [0x0097E934]\nE       \t(No symbol) [0x008B0733]\nE       \t(No symbol) [0x008F326F]\nE       \t(No symbol) [0x008F34AB]\nE       \t(No symbol) [0x0092EE42]\nE       \t(No symbol) [0x00914464]\nE       \t(No symbol) [0x0092CB8D]\nE       \t(No symbol) [0x009141B6]\nE       \t(No symbol) [0x008E8017]\nE       \t(No symbol) [0x008E890D]\nE       \tGetHandleVerifier [0x00AAA5F3+1013699]\nE       \tGetHandleVerifier [0x00AB3E4C+1052700]\nE       \tGetHandleVerifier [0x00AAD4B4+1025668]\nE       \tGetHandleVerifier [0x009DEA2B+179195]\nE       \t(No symbol) [0x00986833]\nE       \t(No symbol) [0x00983198]\nE       \t(No symbol) [0x00983337]\nE       \t(No symbol) [0x0097B4BE]\nE       \tBaseThreadInitThunk [0x762D7BA9+25]\nE       \tRtlInitializeExceptionChain [0x772BC10B+107]\nE       \tRtlClearBits [0x772BC08F+191]\n\nC:\\Users\\allah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "steps": [{"name": "Filling out the registration form", "status": "passed", "start": 1723661626280, "stop": 1723661626744}, {"name": "Submitting the registration form", "status": "passed", "start": 1723661626744, "stop": 1723661627455}, {"name": "Verifying successful registration", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x009B8923+23283]\n\t(No symbol) [0x0097E934]\n\t(No symbol) [0x008B0733]\n\t(No symbol) [0x008F326F]\n\t(No symbol) [0x008F34AB]\n\t(No symbol) [0x0092EE42]\n\t(No symbol) [0x00914464]\n\t(No symbol) [0x0092CB8D]\n\t(No symbol) [0x009141B6]\n\t(No symbol) [0x008E8017]\n\t(No symbol) [0x008E890D]\n\tGetHandleVerifier [0x00AAA5F3+1013699]\n\tGetHandleVerifier [0x00AB3E4C+1052700]\n\tGetHandleVerifier [0x00AAD4B4+1025668]\n\tGetHandleVerifier [0x009DEA2B+179195]\n\t(No symbol) [0x00986833]\n\t(No symbol) [0x00983198]\n\t(No symbol) [0x00983337]\n\t(No symbol) [0x0097B4BE]\n\tBaseThreadInitThunk [0x762D7BA9+25]\n\tRtlInitializeExceptionChain [0x772BC10B+107]\n\tRtlClearBits [0x772BC08F+191]\n\n", "trace": "  File \"D:\\home-task\\tests\\test_registration.py\", line 49, in test_registration\n    result_page = WebDriverWait(driver, 20).until(\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\allah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "start": 1723661627455, "stop": 1723661648491}], "attachments": [{"name": "screenshot", "source": "651c92c6-808b-42f3-9f26-a6e22d020caa-attachment.png", "type": "image/png"}, {"name": "log", "source": "5be489e8-2609-44f6-9988-2a02c48e64ef-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "browser_name", "value": "'chrome'"}], "start": 1723661622990, "stop": 1723661650810, "uuid": "8a67fca0-195d-41b0-a9c4-7d7f230cb87c", "historyId": "c96390f24790f54aaf51169300bd6ca8", "testCaseId": "c205956376af689025d4869fba865b9d", "fullName": "tests.test_registration#test_registration", "labels": [{"name": "story", "value": "User can register with valid details"}, {"name": "feature", "value": "Registration"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_registration"}, {"name": "host", "value": "DESKTOP-5O9S9MI"}, {"name": "thread", "value": "22392-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_registration"}]}