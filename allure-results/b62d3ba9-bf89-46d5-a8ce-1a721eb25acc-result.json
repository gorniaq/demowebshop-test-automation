{"name": "test_registration[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=127.0.6533.100)\nStacktrace:\n\tGetHandleVerifier [0x009B8923+23283]\n\t(No symbol) [0x0097E934]\n\t(No symbol) [0x008B0733]\n\t(No symbol) [0x0088D2E3]\n\t(No symbol) [0x0091A64F]\n\t(No symbol) [0x0092C686]\n\t(No symbol) [0x009141B6]\n\t(No symbol) [0x008E8017]\n\t(No symbol) [0x008E890D]\n\tGetHandleVerifier [0x00AAA5F3+1013699]\n\tGetHandleVerifier [0x00AB3E4C+1052700]\n\tGetHandleVerifier [0x00AAD4B4+1025668]\n\tGetHandleVerifier [0x009DEA2B+179195]\n\t(No symbol) [0x00986833]\n\t(No symbol) [0x00983198]\n\t(No symbol) [0x00983337]\n\t(No symbol) [0x0097B4BE]\n\tBaseThreadInitThunk [0x762D7BA9+25]\n\tRtlInitializeExceptionChain [0x772BC10B+107]\n\tRtlClearBits [0x772BC08F+191]", "trace": "browser_name = 'chrome'\n\n    @allure.feature('Registration')\n    @allure.story('User can register with valid details')\n    @pytest.mark.parametrize(\"browser_name\", [\"chrome\", \"firefox\"])\n    def test_registration(browser_name):\n        driver = DriverFactory.get_driver(browser_name)\n        driver.get(REGISTER_URL)\n    \n        try:\n            with allure.step('Filling out the registration form'):\n                logger.info('Filling out the registration form')\n    \n>               driver.find_element(*LoginPageLocators.GENDER_MALE).click()\nE               AttributeError: 'NoneType' object has no attribute 'click'\n\ntests\\test_registration.py:27: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nbrowser_name = 'chrome'\n\n    @allure.feature('Registration')\n    @allure.story('User can register with valid details')\n    @pytest.mark.parametrize(\"browser_name\", [\"chrome\", \"firefox\"])\n    def test_registration(browser_name):\n        driver = DriverFactory.get_driver(browser_name)\n        driver.get(REGISTER_URL)\n    \n        try:\n            with allure.step('Filling out the registration form'):\n                logger.info('Filling out the registration form')\n    \n                driver.find_element(*LoginPageLocators.GENDER_MALE).click()\n                driver.find_element(*LoginPageLocators.FIRST_NAME).send_keys(\"John\")\n                driver.find_element(*LoginPageLocators.LAST_NAME).send_keys(\"Doe\")\n                driver.find_element(*LoginPageLocators.EMAIL).send_keys(\"john.doe@example.com\")\n                driver.find_element(*LoginPageLocators.PASSWORD).send_keys(\"SecurePassword123\")\n                driver.find_element(*LoginPageLocators.CONFIRM_PASSWORD).send_keys(\"SecurePassword123\")\n    \n            with allure.step('Submitting the registration form'):\n                logger.info('Submitting the registration form')\n                driver.find_element(*LoginPageLocators.REGISTER_BUTTON).click()\n    \n            with allure.step('Verifying successful registration'):\n                logger.info('Verifying successful registration')\n                success_message = WebDriverWait(driver, 10).until(\n                    EC.visibility_of_element_located(LoginPageLocators.SUCCESS_MESSAGE)\n                )\n    \n                assert_that(success_message.text, equal_to(\"Your registration completed\"))\n    \n        except Exception as e:\n            logger.error(f\"Test failed due to {str(e)}\")\n>           allure.attach(driver.get_screenshot_as_png(), name=\"screenshot\", attachment_type=allure.attachment_type.PNG)\n\ntests\\test_registration.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\allah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:839: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nC:\\Users\\allah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:850: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nC:\\Users\\allah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020034BA1290>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x762D7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x772BC10B+107]\\\\n\\\\tRtlClearBits [0x772BC08F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=127.0.6533.100)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x009B8923+23283]\nE       \t(No symbol) [0x0097E934]\nE       \t(No symbol) [0x008B0733]\nE       \t(No symbol) [0x0088D2E3]\nE       \t(No symbol) [0x0091A64F]\nE       \t(No symbol) [0x0092C686]\nE       \t(No symbol) [0x009141B6]\nE       \t(No symbol) [0x008E8017]\nE       \t(No symbol) [0x008E890D]\nE       \tGetHandleVerifier [0x00AAA5F3+1013699]\nE       \tGetHandleVerifier [0x00AB3E4C+1052700]\nE       \tGetHandleVerifier [0x00AAD4B4+1025668]\nE       \tGetHandleVerifier [0x009DEA2B+179195]\nE       \t(No symbol) [0x00986833]\nE       \t(No symbol) [0x00983198]\nE       \t(No symbol) [0x00983337]\nE       \t(No symbol) [0x0097B4BE]\nE       \tBaseThreadInitThunk [0x762D7BA9+25]\nE       \tRtlInitializeExceptionChain [0x772BC10B+107]\nE       \tRtlClearBits [0x772BC08F+191]\n\nC:\\Users\\allah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "steps": [{"name": "Filling out the registration form", "status": "broken", "statusDetails": {"message": "AttributeError: 'NoneType' object has no attribute 'click'\n", "trace": "  File \"D:\\home-task\\tests\\test_registration.py\", line 27, in test_registration\n    driver.find_element(*LoginPageLocators.GENDER_MALE).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"}, "start": 1723650326587, "stop": 1723650334661}], "attachments": [{"name": "log", "source": "4aa1f361-52c3-4392-8245-37ab3302d881-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "browser_name", "value": "'chrome'"}], "start": 1723650320339, "stop": 1723650336859, "uuid": "9da5b0a3-fc38-450a-9c13-87ddbdd3cf80", "historyId": "c96390f24790f54aaf51169300bd6ca8", "testCaseId": "c205956376af689025d4869fba865b9d", "fullName": "tests.test_registration#test_registration", "labels": [{"name": "feature", "value": "Registration"}, {"name": "story", "value": "User can register with valid details"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_registration"}, {"name": "host", "value": "DESKTOP-5O9S9MI"}, {"name": "thread", "value": "18968-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_registration"}]}