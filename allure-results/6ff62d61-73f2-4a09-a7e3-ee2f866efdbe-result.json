{"name": "test_registration[firefox]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: WebDriver session does not exist, or is not active\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nInvalidSessionIDError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:448:5\nassert.that/<@chrome://remote/content/shared/webdriver/Assert.sys.mjs:515:13\nassert.session@chrome://remote/content/shared/webdriver/Assert.sys.mjs:37:4\ndespatch@chrome://remote/content/marionette/server.sys.mjs:315:19\nexecute@chrome://remote/content/marionette/server.sys.mjs:289:16\nonPacket/<@chrome://remote/content/marionette/server.sys.mjs:262:20\nonPacket@chrome://remote/content/marionette/server.sys.mjs:263:9\n_onJSONObjectReady/<@chrome://remote/content/marionette/transport.sys.mjs:494:20", "trace": "browser_name = 'firefox'\n\n    @allure.feature('Registration')\n    @allure.story('User can register with valid details')\n    @pytest.mark.parametrize(\"browser_name\", [\"chrome\", \"firefox\"])\n    def test_registration(browser_name):\n        driver = DriverFactory.get_driver(browser_name)\n        driver.get(REGISTER_URL)\n    \n        try:\n            with allure.step('Filling out the registration form'):\n                logger.info('Filling out the registration form')\n                gender_radio = WebDriverWait(driver, 20).until(EC.presence_of_element_located(LoginPageLocators.GENDER_MALE if REGISTRATION_DATA['gender'] == 'male' else LoginPageLocators.GENDER_FEMALE))\n                gender_radio.click()\n    \n                fields = {\n                    LoginPageLocators.FIRST_NAME: REGISTRATION_DATA['first_name'],\n                    LoginPageLocators.LAST_NAME: REGISTRATION_DATA['last_name'],\n                    LoginPageLocators.EMAIL: REGISTRATION_DATA['email'],\n                    LoginPageLocators.PASSWORD: REGISTRATION_DATA['password'],\n                    LoginPageLocators.CONFIRM_PASSWORD: REGISTRATION_DATA['confirm_password'],\n                }\n    \n                for locator, value in fields.items():\n                    WebDriverWait(driver, 20).until(\n                        EC.presence_of_element_located(locator)\n                    ).send_keys(value)\n    \n            with allure.step('Submitting the registration form'):\n                logger.info('Submitting the registration form')\n                register_button = WebDriverWait(driver, 20).until(\n                    EC.presence_of_element_located(LoginPageLocators.REGISTER_BUTTON)\n                )\n                register_button.click()\n    \n            with allure.step('Verifying successful registration'):\n                logger.info('Verifying successful registration')\n    \n>               success_message = WebDriverWait(driver, 20).until(\n                    EC.visibility_of_element_located(LoginPageLocators.RESULT_MESSAGE)\n                )\n\ntests\\test_registration.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\allah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\nC:\\Users\\allah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\nC:\\Users\\allah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Users\\allah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B30D3D4790>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"TypeError: browsingContext.currentWindowGlobal ...te/actors/MarionetteCommandsParent.sys.mjs:357:17\\\\nobserve@resource://gre/modules/AsyncShutdown.sys.mjs:569:17\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: TypeError: browsingContext.currentWindowGlobal is null\nE       Stacktrace:\nE       getMarionetteCommandsActorProxy/get/<@chrome://remote/content/marionette/actors/MarionetteCommandsParent.sys.mjs:357:17\nE       observe@resource://gre/modules/AsyncShutdown.sys.mjs:569:17\n\nC:\\Users\\allah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nbrowser_name = 'firefox'\n\n    @allure.feature('Registration')\n    @allure.story('User can register with valid details')\n    @pytest.mark.parametrize(\"browser_name\", [\"chrome\", \"firefox\"])\n    def test_registration(browser_name):\n        driver = DriverFactory.get_driver(browser_name)\n        driver.get(REGISTER_URL)\n    \n        try:\n            with allure.step('Filling out the registration form'):\n                logger.info('Filling out the registration form')\n                gender_radio = WebDriverWait(driver, 20).until(EC.presence_of_element_located(LoginPageLocators.GENDER_MALE if REGISTRATION_DATA['gender'] == 'male' else LoginPageLocators.GENDER_FEMALE))\n                gender_radio.click()\n    \n                fields = {\n                    LoginPageLocators.FIRST_NAME: REGISTRATION_DATA['first_name'],\n                    LoginPageLocators.LAST_NAME: REGISTRATION_DATA['last_name'],\n                    LoginPageLocators.EMAIL: REGISTRATION_DATA['email'],\n                    LoginPageLocators.PASSWORD: REGISTRATION_DATA['password'],\n                    LoginPageLocators.CONFIRM_PASSWORD: REGISTRATION_DATA['confirm_password'],\n                }\n    \n                for locator, value in fields.items():\n                    WebDriverWait(driver, 20).until(\n                        EC.presence_of_element_located(locator)\n                    ).send_keys(value)\n    \n            with allure.step('Submitting the registration form'):\n                logger.info('Submitting the registration form')\n                register_button = WebDriverWait(driver, 20).until(\n                    EC.presence_of_element_located(LoginPageLocators.REGISTER_BUTTON)\n                )\n                register_button.click()\n    \n            with allure.step('Verifying successful registration'):\n                logger.info('Verifying successful registration')\n    \n                success_message = WebDriverWait(driver, 20).until(\n                    EC.visibility_of_element_located(LoginPageLocators.RESULT_MESSAGE)\n                )\n                assert_that(success_message.text, equal_to(SUCCESS_MESSAGE))\n    \n        except Exception as e:\n            logger.error(f\"Test failed due to {str(e)}\")\n>           allure.attach(driver.get_screenshot_as_png(), name=\"screenshot\", attachment_type=allure.attachment_type.PNG)\n\ntests\\test_registration.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\allah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:839: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nC:\\Users\\allah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:850: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nC:\\Users\\allah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B30D3D4790>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"WebDriver session does not exist, or is no...ionette/server.sys.mjs:263:9\\\\n_onJSONObjectReady/<@chrome://remote/content/marionette/transport.sys.mjs:494:20\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: WebDriver session does not exist, or is not active\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       InvalidSessionIDError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:448:5\nE       assert.that/<@chrome://remote/content/shared/webdriver/Assert.sys.mjs:515:13\nE       assert.session@chrome://remote/content/shared/webdriver/Assert.sys.mjs:37:4\nE       despatch@chrome://remote/content/marionette/server.sys.mjs:315:19\nE       execute@chrome://remote/content/marionette/server.sys.mjs:289:16\nE       onPacket/<@chrome://remote/content/marionette/server.sys.mjs:262:20\nE       onPacket@chrome://remote/content/marionette/server.sys.mjs:263:9\nE       _onJSONObjectReady/<@chrome://remote/content/marionette/transport.sys.mjs:494:20\n\nC:\\Users\\allah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSessionIdException"}, "steps": [{"name": "Filling out the registration form", "status": "passed", "start": 1723661965049, "stop": 1723661965473}, {"name": "Submitting the registration form", "status": "passed", "start": 1723661965473, "stop": 1723661966033}, {"name": "Verifying successful registration", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: TypeError: browsingContext.currentWindowGlobal is null\nStacktrace:\ngetMarionetteCommandsActorProxy/get/<@chrome://remote/content/marionette/actors/MarionetteCommandsParent.sys.mjs:357:17\nobserve@resource://gre/modules/AsyncShutdown.sys.mjs:569:17\n\n", "trace": "  File \"D:\\home-task\\tests\\test_registration.py\", line 50, in test_registration\n    success_message = WebDriverWait(driver, 20).until(\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\allah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 96, in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\allah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 156, in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\allah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 748, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\allah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\allah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1723661966033, "stop": 1723661984655}], "attachments": [{"name": "log", "source": "5ce6b876-8d90-466b-9458-6de418161ccb-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "browser_name", "value": "'firefox'"}], "start": 1723661955561, "stop": 1723661986725, "uuid": "40bac241-c25d-487d-88d0-d718313e0b2d", "historyId": "dcc3e78ff4c001f2a2268da5a2eada65", "testCaseId": "c205956376af689025d4869fba865b9d", "fullName": "tests.test_registration#test_registration", "labels": [{"name": "story", "value": "User can register with valid details"}, {"name": "feature", "value": "Registration"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_registration"}, {"name": "host", "value": "DESKTOP-5O9S9MI"}, {"name": "thread", "value": "1676-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_registration"}]}